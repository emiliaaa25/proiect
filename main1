void muta(int i)
{
    for(int j=strlen(functie)-2;j>i;j--)
    {
        vect[j]=vect[j+1];
    }
}
void transformarefunctie(char *functie)
{
    int i=0,j,nr=0;
    while(i<=strlen(functie)-1)
    {
        if(isdigit(functie[i])!=0)
        {
            while(isdigit(functie[i]!=0))
            {
                vect[nr]=functie[i];
                i++;
                nr++;
            }
        muta(i);
        vect[nr]=' ';nr++;
        }
        else if(strchr("+-*^/)(",functie[i]))
                {
                    vect[nr]=functie[i];
                    nr++;i=i+1;
                    muta(i);
                    vect[nr]=' ';nr++;
                }
        else
            if(functie[i]=='x')
            {vect[nr]=functie[i];
            nr++;
            i++;
            muta(i);
            vect[nr]=' ';nr++;}
    else
            {
                if(strchr("s",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;i=i+3;muta(i);
                    vect[nr]=' ';nr++;
                    }
                if(strchr("c",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;i=i+3;muta(i);
                    vect[nr]=' ';nr++;
                    }
                if(strchr("l",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;i=i+2;muta(i);
                    vect[nr]=' ';nr++;
                    }
                if(strchr("t",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;
                    }
                if(strchr("g",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;
                    }
                if(strchr("r",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;
                    }


    }
}
}
 void pune_in_stiva(char *vect)
{
stiva_vida(infixata);
char*p,val;
p=strtok(vect," ");
while(p)
{   strcpy((char*)val,p);
    push(infixata,val);
    p=strtok(" ",NULL);
}
}
double operatie (char r, double x, double y)
{
    if(r=='+')
    return x+y;
   if(r=='-')
    return x-y;
   if(r=='*')
    return x*y;
   if(r=='/')
    return x/y;
   if(r=='^')
    return pow(x,y);
}

double operatie_spekiala (char r, double x)
  {
    if(r=='s')
    return sin(x);
   if(r=='c')
    return cos(x);
   if(r=='l')
    return log(x);
    if(r=='r')
    return sqrt(x);
    if(r=='t')
        return tan(x);
}

int prioritatecaracter(char a)
{
    if(strchr("+",a)||strchr("-",a))return 1;
        else if(strchr("*",a)||strchr("/",a))return 2;
                else if(strchr("^",a))return 3;
                        else if(strchr("sclt",a))return 4;
                                else if(strchr("(",a)||strchr(")",a))return 5;
}


double transformaredininfixinpostifx(double x)
{
    char  *operator1[256], valpr[256];
    lista *value,*operatori;
    stiva_vida(value);
    stiva_vida(operatori);
    valpr[0]=NULL;
    while(esteVidaS(infixata)==0)
    {
        if(top(infixata)=='(')
                {push(operatori,top(infixata));
                pop(infixata);}
        else
             if(top(infixata)=='x')
                 {push(value,x);pop(infixata);}
        else
            if(isdigit(top(infixata)))
            { char c=top(infixata);
                double val=atoi((char*)c);
                push(value,val);
                pop(infixata);}
        else
            if(strchr("+-/^*",top(infixata)!=0))
                {push(operatori,top(infixata));
                pop(infixata);}
        else

            if(top(infixata)==')')
               {push(operatori,top(infixata));
               pop(infixata);
                   while(top(infixata)!='(')
                    {
                        if(strchr("+-/^*",top(infixata)!=0))
                           {push(operatori,top(infixata));
                           pop(infixata);}
                           if(strchr("scltr",top(infixata)!=0))
                           {push(operatori,top(infixata));
                           pop(infixata);}
                        else
                            if(top(infixata)=='x')
                                {push(value,x);pop(infixata);}
                            else
                                if(isdigit(top(infixata)))
                                    { char c=top(infixata);
                                    double val=atoi((char*)c);
                                    push(value,val);pop(infixata);}

                else
                    if(top(infixata)=='(')
                    while(top(operatori)!=')'&&esteVidaS(operatori)==0)
                    {double valoare1, valoare2,answ;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        if(operator1=='s'||operator1=='c'||operator1=='l'||operator1=='r'||operator1=='t')
                               {
                                   answ=operatie_spekiala(operator1,valoare1);
                                   pop(operatori);
                                }
                        else {
                                answ=operatie(operator1, valoare1, valoare2);
                                pop(operatori);
                            }
                        push2(value,answ);}
               }
               }
                    else
                    {
                    while(esteVidaS(operatori)==0&&
                          prioritatecaracter(top(operatori))>=prioritatecaracter(top(infixata)))
                    {
                        double valoare1, valoare2,ans;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        if(operator1=='s'||operator1=='c'||operator1=='l'||operator1=='r'||operator1=='t')
                               {
                                   ans=operatie_spekiala(operator1,valoare1);
                                   pop(operatori);
                                }
                        else {
                                ans=operatie(operator1, valoare1, valoare2);
                                pop(operatori);
                            }
                        push(value,ans);}

                    push(operatori,top(infixata));
                    }
    while(esteVidaS(operatori)==0)

            {double valoare1, valoare2;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        double ans=operatie(operator1, valoare1, valoare2);
                        push(value,ans);}
    }

    return top(value);

    //functia noastra este in top(value)
}

double f(double x)
{
    return transformaredininfixinpostifx(x);
}
