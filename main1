struct nod{
    double info;
    char inf;
    nod *urm;
};
nod *infixata,*postfixata,*S,*p,*varf,*prim,*ultim;

void stiva_vida(nod *&S)
{
    S=NULL;
}

void eliminare(nod *&postfixata)
{
    nod *q;
    q=postfixata;
    postfixata=postfixata->urm;
    delete q;
 }


void inserare(nod *&postfixata, char element)
{
  nod *q =new nod;
  q->inf=element;
  q->urm=NULL;
  if(postfixata==NULL)
    postfixata=q;
  else
  {
    nod *p=postfixata;
    while(p->urm!=NULL)
      p=p->urm;
    p->urm=q;
  }
}

bool esteVidaC(nod *&prim)//coada
{
    if(prim==NULL)
    return 1;
else
    return 0;
}

void coada_vida(nod *&prim)
{
    prim=NULL;
}

void push(nod *&varf, char element)
{
nod *Stiva;
Stiva=new nod;
Stiva->inf=element;
Stiva->urm = varf;
varf=Stiva;
}

bool esteVidaS(nod *&Stiva)//stiva
{
    if(Stiva==NULL)return 1;
        else return 0;
}

void pop(nod *&varf )
{
    nod *Stiva=varf;
    varf=varf->urm;
    delete Stiva;

}

void push2(nod *&varf, double element)
{
nod *Stiva;
Stiva=new nod;
Stiva->info=element;
Stiva->urm = varf;
varf=Stiva;
}

int prioritatecaracter(char a)
{
    if(strchr("+",a)||strchr("-",a))return 1;
        else if(strchr("*",a)||strchr("/",a))return 2;
                else if(strchr("^",a))return 3;
                        else if(strchr("scltr",a))return 4;
                                else if(strchr("(",a)||strchr(")",a))return 5;
}


void transformarefunctie(char*fun)
{
    int i=0,j,nr=0;
    double numar;
    while(i<=strlen(fun)-1)
    {
        if(isdigit(fun[i])!=0)
        {
            while(isdigit(fun[i])!=0)
            {
                vect[nr]=fun[i];
                i++;
                nr++;
            }
        vect[nr]=' ';nr++;
        }
        else if(strchr("+-*^/)(",fun[i]))
                {
                    vect[nr]=fun[i];
                    nr++;i=i+1;
                    vect[nr]=' ';nr++;
                }
        else
            if(fun[i]=='x')
            {vect[nr]=fun[i];
            nr++;
            i++;
            vect[nr]=' ';nr++;}
    else
            {
                if(strchr("s",fun[i])!=0)
                    {
                    vect[nr]=fun[i];
                    nr++;i=i+3;
                    vect[nr]=' ';nr++;
                    }
                if(strchr("c",fun[i])!=0)
                    {
                    vect[nr]=fun[i];
                    nr++;i=i+3;
                    vect[nr]=' ';nr++;
                    }
                if(strchr("l",fun[i])!=0)
                    {
                    vect[nr]=fun[i];
                    nr++;i=i+2;
                    vect[nr]=' ';nr++;
                    }
                if(strchr("t",fun[i])!=0)
                    {
                    vect[nr]=fun[i];
                    nr++;
                    }
                if(strchr("g",fun[i])!=0)
                    {
                    vect[nr]=fun[i];
                    nr++;
                    }
                if(strchr("r",fun[i])!=0)
                    {
                    vect[nr]=fun[i];
                    nr++;
                    }


    }
}
for(i=0;i<=strlen(vect)-1;i++)
    if(vect[i]!=' ')
        inserare(infixata,vect[i]);


}



double operatie (char r, double x, double y)
{
    if(r=='+')return x+y;
    if(r=='-')return x-y;
    if(r=='*')return x*y;
    if(r=='/')return x/y;
    if(r=='^')return pow(x,y);
}

double operatie_speciala (char r, double x)
{
    if(r=='s')return sin(x);
    if(r=='c')return cos(x);
    if(r=='l')return log(x);
    if(r=='r')return sqrt(x);
    if(r=='t')return tan(x);
}


void transformaredininfixinpostifx( )
{transformarefunctie(fun);
    while (esteVidaC(infixata)==0)
    {
        if(infixata->inf=='x')// x=necunoscuta
                 {
                     inserare(postfixata,'x');
                     eliminare(infixata);
                }

        else
            if(isdigit(infixata->inf))//cifre
            {
                inserare(postfixata,infixata->inf);
                eliminare(infixata);
            }
                else
                    if(infixata->inf==')')
                        {
                            while(S->inf!='(')
                                {
                                inserare(postfixata,S->inf);
                                pop(S);
                                }
                        pop(S); eliminare(infixata);
                        }
                    else
                        {
                            while (esteVidaS(S)==0&&S->inf!='('&&prioritatecaracter(S->inf)>= prioritatecaracter(infixata->inf))
                            {
                            inserare(postfixata,S->inf);
                            pop(S);
                            }
                        push(S,infixata->inf);
                        eliminare(infixata);
                        }
    }
    while (esteVidaS(S)==0)
    {
    inserare(postfixata,S->inf);
    pop(S);
    }
}

double evaluare(double x)
{double val; transformaredininfixinpostifx();
    while(esteVidaC(postfixata)==0)
    {
        if(postfixata->inf=='x')// x=necunoscuta
                 {
                     push2(S,x);
                     eliminare(postfixata);
                }

        else
            if(isdigit(postfixata->inf))//cifre
            {   char c=postfixata->inf;
                val=c-'0';
                push2(S,val);
                eliminare(postfixata);
            }

        else
            if(strchr("+-/^*",postfixata->inf)!=0)
                        {double valoare1, valoare2,answ;
                        valoare1=S->info;
                        pop(S);
                        valoare2=S->info;
                        pop(S);
                        char operator1=postfixata->inf;
                        answ=operatie(operator1, valoare2, valoare1);
                        eliminare(postfixata);
                        push2(S,answ);
                        }
            else
                if(strchr("sclrt",postfixata->inf)!=0)
                    {
                    double valoare1,answ;
                    valoare1=S->info;
                    pop(S);
                    char operator1=postfixata->inf;
                    answ=operatie_speciala(operator1,valoare1);
                    eliminare(postfixata);
                    push2(S,answ);
                    }
                }

    double valoare=S->info;pop(S);
    return valoare;
}
double f(double x)
{
    //return 2*x*cos(x);
    double m;
    m=evaluare(x);
    return m;
}

int k,v[50];
void evaluator()
{
    int nr=0,ok=0,nr1=0,i;
    for(i=0;i<=strlen(fun)-1;i++)
    {
    if(fun[i]=='(')
        nr++;
    if(fun[i]==')')
        nr1++;
    if(fun[i]=='('&&fun[i+1]==')')
        {ok=1;v[++k]=ok;}
    if(fun[i]=='('&&fun[i+1]=='+')
        {ok=2;v[++k]=ok;}
    if(fun[i]=='('&&fun[i+1]=='-')
        {ok=3;v[++k]=ok;}
    if(fun[i]=='('&&fun[i+1]=='*')
        {ok=4;v[++k]=ok;}
    if(fun[i]=='('&&fun[i+1]=='/')
        {ok=5;v[++k]=ok;}
    if(fun[i]=='('&&fun[i+1]=='^')
        {ok=6;v[++k]=ok;}
    if(fun[i]==')'&&fun[i]=='(')
        {ok=7;v[++k]=ok;}
    if(fun[i]==')'&&fun[i+1]=='s')
        {ok=8;v[++k]=ok;}
    if(fun[i]==')'&&fun[i+1]=='c')
        {ok=9;v[++k]=ok;}
    if(fun[i]==')'&&fun[i+1]=='l')
        {ok=10;v[++k]=ok;}
    if(fun[i]==')'&&fun[i+1]=='r')
        {ok=11;v[++k]=ok;}
    if(fun[i]==')'&&fun[i+1]=='t')
        {ok=12;v[++k]=ok;}
    if(fun[i]==')'&&fun[i+1]=='x')
        {ok=13;v[++k]=ok;}
    if(fun[i]==')'&&isdigit(fun[i+1]))
        {ok=14;v[++k]=ok;}
    if(fun[i]=='+'&&fun[i+1]=='+')
        {ok=15;v[++k]=ok;}
    if(fun[i]=='+'&&fun[i+1]=='-')
        {ok=16;v[++k]=ok;}
    if(fun[i]=='+'&&fun[i+1]=='*')
        {ok=17;v[++k]=ok;}
    if(fun[i]=='+'&&fun[i+1]=='/')
        {ok=18;v[++k]=ok;}
    if(fun[i]=='+'&&fun[i+1]=='^')
        {ok=19;v[++k]=ok;}
    if(fun[i]=='-'&&fun[i+1]=='+')
        {ok=20;v[++k]=ok;}
    if(fun[i]=='-'&&fun[i+1]=='-')
        {ok=21;v[++k]=ok;}
    if(fun[i]=='-'&&fun[i+1]=='*')
        {ok=22;v[++k]=ok;}
    if(fun[i]=='-'&&fun[i+1]=='/')
        {ok=23; v[++k]=ok;}
    if(fun[i]=='-'&&fun[i+1]=='^')
        {ok=24;v[++k]=ok;}
    if(fun[i]=='*'&&fun[i+1]=='+')
        {ok=25; v[++k]=ok;}
    if(fun[i]=='*'&&fun[i+1]=='-')
        {ok=26; v[++k]=ok;}
    if(fun[i]=='*'&&fun[i+1]=='*')
        {ok=27; v[++k]=ok;}
    if(fun[i]=='*'&&fun[i+1]=='/')
        {ok=28; v[++k]=ok;}
    if(fun[i]=='*'&&fun[i+1]=='^')
        {ok=29; v[++k]=ok;}
    if(fun[i]=='/'&&fun[i+1]=='+')
        {ok=30; v[++k]=ok;}
    if(fun[i]=='/'&&fun[i+1]=='-')
        {ok=31; v[++k]=ok;}
    if(fun[i]=='/'&&fun[i+1]=='*')
        {ok=32; v[++k]=ok;}
    if(fun[i]=='/'&&fun[i+1]=='/')
        {ok=33; v[++k]=ok;}
    if(fun[i]=='/'&&fun[i+1]=='^')
        {ok=34; v[++k]=ok;}
    if(fun[i]=='^'&&fun[i+1]=='+')
        {ok=35; v[++k]=ok;}
    if(fun[i]=='^'&&fun[i+1]=='-')
        {ok=36; v[++k]=ok;}
    if(fun[i]=='^'&&fun[i+1]=='*')
        {ok=37; v[++k]=ok;}
    if(fun[i]=='^'&&fun[i+1]=='/')
        {ok=38; v[++k]=ok;}
    if(fun[i]=='^'&&fun[i+1]=='^')
        {ok=39; v[++k]=ok;}
    }
    if(nr!=nr1)
        {ok=40; v[++k]=ok;}
    if(k==0)
        ok=41;

}
 void mesaj_evaluator(int width, int height)
 {  settextstyle(8, HORIZ_DIR, 3);int i;
 evaluator();
 for(i=0;i<=k;i++)
 {
    if(v[i]==1)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de o paranteza inchisa");
    if(v[i]==2)
        {outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de +");
        delay(60);
        setcolor(BLACK);}
    if(v[i]==3)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de -");
    if(v[i]==4)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de *");
    if(v[i]==5)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de /");
    if(v[i]==6)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de ^");
    if(v[i]==7)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza deschisa urmata de o paranteza inchisa");
    if(v[i]==8)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de functia sinus");
    if(v[i]==9)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de functia cosinus");
    if(v[i]==10)
        setcolor(WHITE);
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de functia logaritmica");
    if(v[i]==11)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de functia radical");
    if(v[i]==12)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de functia tangenta");
    if(v[i]==13)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de constanta x");
    if(v[i]==14)
        outtextxy(width/2,height/2+150,"Nu poate aparea o paranteza inchisa urmata de un numar");
    if(v[i]==15)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul + urmat de simbolul + ");
    if(v[i]==16)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul + urmat de simbolul - ");
    if(v[i]==17)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul + urmat de simbolul * ");
    if(v[i]==18)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul + urmat de simbolul / ");
    if(v[i]==19)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul + urmat de simbolul ^ ");
    if(v[i]==20)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul - urmat de simbolul + ");
    if(v[i]==21)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul - urmat de simbolul - ");
    if(v[i]==22)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul - urmat de simbolul * ");
    if(v[i]==23)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul - urmat de simbolul / ");
    if(v[i]==24)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul - urmat de simbolul ^ ");
    if(v[i]==25)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul * urmat de simbolul + ");
    if(v[i]==26)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul * urmat de simbolul - ");
    if(v[i]==27)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul * urmat de simbolul * ");
    if(v[i]==28)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul * urmat de simbolul / ");
    if(v[i]==29)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul * urmat de simbolul ^ ");
    if(v[i]==30)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul / urmat de simbolul + ");
    if(v[i]==31)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul / urmat de simbolul - ");
    if(v[i]==32)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul / urmat de simbolul * ");
    if(v[i]==33)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul / urmat de simbolul / ");
    if(v[i]==34)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul / urmat de simbolul ^ ");
    if(v[i]==35)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul ^ urmat de simbolul + ");
    if(v[i]==36)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul ^ urmat de simbolul - ");
    if(v[i]==37)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul ^ urmat de simbolul * ");
    if(v[i]==38)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul ^ urmat de simbolul / ");
    if(v[i]==39)
        outtextxy(width/2,height/2+150,"Nu poate aparea simbolul ^ urmat de simbolul ^ ");
    if(v[i]==40)
        outtextxy(width/2,height/2+150,"Numarul de paranteze deschise nu coincide cu numarul de paranteze inchise ");
 }
 }

 
 setfillstyle(0,BLACK);
    bar(width/2-550,height/2+70,width/2+550,height/2+250);//text 3
    setcolor(WHITE);
    rectangle(width/2-550,height/2+70,width/2+550,height/2+250);//text 3
