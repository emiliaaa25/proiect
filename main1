



double transformaredininfixinpostifx(double x)
{
    char  *operator1[256], valpr[256];
    lista *value,*operatori;
    stiva_vida(value);
    stiva_vida(operatori);
    valpr[0]=NULL;
    while(esteVidaS(infixata)==0)
    {
        if(top(infixata)=='(')
                {push(operatori,top(infixata));
                pop(infixata);}
        else
             if(top(infixata)=='x')
                 {push(value,x);pop(infixata);}
        else
            if(isdigit(top(infixata)))
            { char c=top(infixata);
                double val=atoi((char*)c);
                push(value,val);
                pop(infixata);}
        else
            if(strchr("+-/^*",top(infixata)!=0))
                {push(operatori,top(infixata));
                pop(infixata);}
        else

            if(top(infixata)==')')
               {push(operatori,top(infixata));
               pop(infixata);
                   while(top(infixata)!='(')
                    {
                        if(strchr("+-/^*",top(infixata)!=0))
                           {push(operatori,top(infixata));
                           pop(infixata);}
                           if(strchr("scltr",top(infixata)!=0))
                           {push(operatori,top(infixata));
                           pop(infixata);}
                        else
                            if(top(infixata)=='x')
                                {push(value,x);pop(infixata);}
                            else
                                if(isdigit(top(infixata)))
                                    { char c=top(infixata);
                                    double val=atoi((char*)c);
                                    push(value,val);pop(infixata);}

                else
                    if(top(infixata)=='(')
                    while(top(operatori)!=')'&&esteVidaS(operatori)==0)
                    {double valoare1, valoare2,answ;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        if(operator1=='s'||operator1=='c'||operator1=='l'||operator1=='r'||operator1=='t')
                               {
                                   answ=operatie_spekiala(operator1,valoare1);
                                   pop(operatori);
                                }
                        else {
                                answ=operatie(operator1, valoare1, valoare2);
                                pop(operatori);
                            }
                        push2(value,answ);}
               }
               }
                    else
                    {
                    while(esteVidaS(operatori)==0&&
                          prioritatecaracter(top(operatori))>=prioritatecaracter(top(infixata)))
                    {
                        double valoare1, valoare2,ans;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        if(operator1=='s'||operator1=='c'||operator1=='l'||operator1=='r'||operator1=='t')
                               {
                                   ans=operatie_spekiala(operator1,valoare1);
                                   pop(operatori);
                                }
                        else {
                                ans=operatie(operator1, valoare1, valoare2);
                                pop(operatori);
                            }
                        push(value,ans);}

                    push(operatori,top(infixata));
                    }
    while(esteVidaS(operatori)==0)

            {double valoare1, valoare2;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        double ans=operatie(operator1, valoare1, valoare2);
                        push(value,ans);}
    }

    return top(value);

    //functia noastra este in top(value)
}

double f(double x)
{
    return transformaredininfixinpostifx(x);
}
