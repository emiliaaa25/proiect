#include <iostream>
#include<cmath>
#include<stdio.h>
#include<ctype.h>
#include<windows.h>
#include<graphics.h>
#include<winbgim.h>
#include<cstring>
#include<math.h>
#include<stdlib.h>
#define NMAX 200
double A,B;
double MIN,MAX;
int STANGA=250, DREAPTA=1100, TOP=150, BOTTOM=600;

using namespace std;

struct lista{
    char info;
    char inf;
    lista *urm;
    lista *varf;
}*nod,*infixata,*value,*operatori;


void push(lista *&varf, char element)
{
lista *Stiva;
Stiva=new lista;
Stiva->inf=element;
Stiva->urm = varf;
varf=Stiva;
}

void pop(lista *&varf )
{
    lista *Stiva=varf;
    varf=varf->urm;
    delete Stiva;

}

char top(lista *&varf)
{
    char element=varf->inf;
    lista *Stiva=varf;
    return element;
}


bool esteVidaS(lista *&Stiva)//stiva
{
return top(Stiva);
}

void stiva_vida(lista *&Stiva)
{
    Stiva->varf=NULL;
}
char vect[NMAX];

void transformarefunctie(char functie[256], lista *&infixata);
double operatie (char r, double x, double y);
int prioritatecaracter(char *a[]);
double transformaredininfixinpostifx(lista *&infixata, lista *&value, lista *&operatori,double x);
double f(double x);
char functie[256];

void muta(int i)
{
    for(int j=strlen(functie)-2;j>i;j--)
    {
        vect[j]=vect[j+1];
    }
}
void transformarefunctie(char *functie)
{
    int i=0,j,nr=0;
    while(i<=strlen(functie)-1)
    {
        if(isdigit(functie[i])!=0)
        {
            while(isdigit(functie[i]!=0))
            {
                vect[nr]=functie[i];
                i++;
                nr++;
            }
        muta(i);
        vect[nr]=' ';nr++;
        }
        else if(strchr("+-*^/)(",functie[i]))
                {
                    vect[nr]=functie[i];
                    nr++;i=i+1;
                    muta(i);
                    vect[nr]=' ';nr++;
                }
        else
            if(functie[i]=='x')
            {vect[nr]=functie[i];
            nr++;
            i++;
            muta(i);
            vect[nr]=' ';nr++;}
    else
            {
                if(strchr("s",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;i=i+3;muta(i);
                    vect[nr]=' ';nr++;
                    }
                if(strchr("c",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;i=i+3;muta(i);
                    vect[nr]=' ';nr++;
                    }
                if(strchr("l",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;i=i+2;muta(i);
                    vect[nr]=' ';nr++;
                    }
                if(strchr("t",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;
                    }
                if(strchr("g",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;
                    }
                if(strchr("r",functie[i])!=0)
                    {
                    vect[nr]=functie[i];
                    nr++;
                    }


    }
}
}
 void pune_in_stiva(char *vect)
{
stiva_vida(infixata);
char*p,val;
p=strtok(vect," ");
while(p)
{   strcpy((char*)val,p);
    push(infixata,val);
    p=strtok(" ",NULL);
}
}
double operatie (char r, double x, double y)
{
    if(r=='+')
    return x+y;
   if(r=='-')
    return x-y;
   if(r=='*')
    return x*y;
   if(r=='/')
    return x/y;
   if(r=='^')
    return pow(x,y);
   if(r=='s')
    return sin(x);
   if(r=='c')
    return cos(x);
   if(r=='l')
    return log(x);
    if(r=='r')
    return sqrt(x);
}

int prioritatecaracter(char a)
{
    if(strchr("+",a)||strchr("-",a))return 1;
        else if(strchr("*",a)||strchr("/",a))return 2;
                else if(strchr("^",a))return 3;
                        else if(strchr("sclt",a))return 4;
                                else if(strchr("(",a)||strchr(")",a))return 5;
}


double transformaredininfixinpostifx(lista *&infixata,double x)
{
    char  *operator1[256], valpr[256];
    lista *value,*operatori;
    stiva_vida(value);
    stiva_vida(operatori);
    valpr[0]=NULL;
    while(esteVidaS(infixata)==0)
    {
        if(top(infixata)=='(')
                push(operatori,top(infixata));
        else
             if(top(infixata)=='x')
                 push(value,x);
        else
            if(isdigit(top(infixata)))
            { char c=top(infixata);
                double val=atoi((char*)c);
                push(value,val);}
        else

            if(top(infixata)==')')
                {if(esteVidaS(operatori)==1)
                push(operatori,top(infixata));
                else
                while(top(operatori)!='('&&esteVidaS(operatori)==0)
                    {double valoare1, valoare2;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        double ans=operatie(operator1, valoare1, valoare2);
                        push(value,ans);}
                    if(esteVidaS(operatori)==0)
                        pop(operatori);
                 }
                 else
                    {
                    while(esteVidaS(operatori)==0&&
                          prioritatecaracter(top(operatori))>=prioritatecaracter(top(infixata)))
                    {
                        double valoare1, valoare2;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        double ans=operatie(operator1, valoare1, valoare2);
                        push(value,ans);}

                    push(operatori,top(infixata));
                    }
    }
    while(esteVidaS(operatori)==0)

            {double valoare1, valoare2;
                        valoare1=top(value);
                        pop(value);
                        valoare2=top(value);
                        pop(value);
                        char operator1=top(operatori);
                        double ans=operatie(operator1, valoare1, valoare2);
                        push(value,ans);}
    return top(value);

    //functia noastra este in top(value)
}

double f(double x)
{
    return transformaredininfixinpostifx(infixata,x);
}

void aflareminsimax()
{//aflare min max
    int i;
    double x,y;
    MIN=100000001;
    MAX=-MIN;
    for(i=0;i<=(DREAPTA-STANGA);i++)
    {
        x=A+i*(B-A)/(DREAPTA-STANGA);
        y=f(x);//functia introdusa de la la fereastra in casuta de text
        MAX=max(MAX,y);//noul max
        MIN=min(MIN,y);//noul min
    }
}

void graficfunctie()
{//trasare linie grafic pt toate punctele
    int i;
    double x,y,xecran,yecran,xpunctactual,ypunctactual;
    x=A;
    y=(int)(f(A));
    aflareminsimax();
    xecran=(DREAPTA-STANGA)*x/(B-A)+(B*STANGA-A*DREAPTA)/(B-A);
    yecran=(BOTTOM-TOP)*y/(MAX-MIN)+(MAX*TOP-MIN*BOTTOM)/(MAX-MIN);
    for(i=0;i<=DREAPTA-STANGA;i++)
    {
        x=A+i*(B-A)/(DREAPTA-STANGA);
        y=f(x);
        xpunctactual=(int)((DREAPTA-STANGA)*x/(B-A)+(B*STANGA-A*DREAPTA)/(B-A));
        ypunctactual=(int)((BOTTOM-TOP)*y/(MAX-MIN)+(MAX*TOP-MIN*BOTTOM)/(MAX-MIN));
        line(xecran,yecran,xpunctactual,ypunctactual);
        xecran=xpunctactual;
        yecran=ypunctactual;
    }
}

void graficnou(int width, int height)
{
    setcolor(YELLOW);
    graficfunctie();
    setcolor(WHITE);
    settextstyle(8, HORIZ_DIR, 4 );
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    outtextxy(width/2,height/4-50,"Reprezentarea functiei:");

    setcolor(WHITE);
    settextstyle(8, HORIZ_DIR, 3 );
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    outtextxy(width/4+50,height-100,"Integrala in xmin:");

    setcolor(WHITE);
    settextstyle(8, HORIZ_DIR, 3 );
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    outtextxy(width/2+210,height-100,"Integrala in xmax:");
    char car;
    do
        {
            car = getch();
            if(car==KEY_RIGHT||car=='d')//dr
                {
                    setcolor(BLACK);
                    graficfunctie();
                    A+=50;
                    B+=50;

                    setcolor(WHITE);
                    settextstyle(8, HORIZ_DIR, 4 );
                    settextjustify(CENTER_TEXT,CENTER_TEXT);
                    outtextxy(width/2,height/4-50,"Reprezentarea functiei:");

                    setcolor(WHITE);
                    settextstyle(8, HORIZ_DIR, 3 );
                    settextjustify(CENTER_TEXT,CENTER_TEXT);
                    outtextxy(width/4+50,height-100,"Integrala in xmin:");

                    setcolor(WHITE);
                    settextstyle(8, HORIZ_DIR, 3 );
                    settextjustify(CENTER_TEXT,CENTER_TEXT);
                    outtextxy(width/2+210,height-100,"Integrala in xmax:");
                    setcolor(YELLOW);
                    graficfunctie();
                }
            else if(car==KEY_LEFT||car=='a')//st
            {
                setcolor(BLACK);
                graficfunctie();
                A-=50;
                B-=50;
                setcolor(WHITE);
                settextstyle(8, HORIZ_DIR, 4 );
                settextjustify(CENTER_TEXT,CENTER_TEXT);
                outtextxy(width/2,height/4-50,"Reprezentarea functiei:");

                setcolor(WHITE);
                settextstyle(8, HORIZ_DIR, 3 );
                settextjustify(CENTER_TEXT,CENTER_TEXT);
                outtextxy(width/4+50,height-100,"Integrala in xmin:");

                setcolor(WHITE);
                settextstyle(8, HORIZ_DIR, 3 );
                settextjustify(CENTER_TEXT,CENTER_TEXT);
                outtextxy(width/2+210,height-100,"Integrala in xmax:");
                setcolor(YELLOW);
                graficfunctie();
                }
        }
    while(car!=13);
}

void desenarefunctie()
{//desenare grafic
    int height, width;
    height=GetSystemMetrics(SM_CYSCREEN);
    width=GetSystemMetrics(SM_CXSCREEN);
    initwindow(width,height,"Fereastra",-4,-4);

    setcolor(RED);
    rectangle(STANGA,TOP,DREAPTA,BOTTOM);
    line(STANGA,height/2,DREAPTA, height/2);//axa ox
    line(width/2,TOP,width/2,BOTTOM);//axa oy

    setcolor(YELLOW);
    graficnou(width,height);//graficul efectiv
        getch();
    closegraph();
}
int main()
{
        cin>>A>>B;
        cin>>functie;
    transformarefunctie(functie);
    desenarefunctie();
    getch();
    closegraph();
    return 0;
}
